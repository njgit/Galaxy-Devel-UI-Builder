.\" Automatically generated by Pod::Man 2.22 (Pod::Simple 3.19)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Galaxy::Devel::UI::Builder 3"
.TH Galaxy::Devel::UI::Builder 3 "2011-09-27" "perl v5.10.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Galaxy::Devel::UI::Builder \- UI specification in perl for Galaxy Platform
.SH "VERSION"
.IX Header "VERSION"
version 0.001
.PP
.Vb 3
\& my $g = Galaxy::Devel::UI::Builder\->new(id=>"fa_gc_content_1", name=>"Compute GC contents");
\& $g\->desc("Compute GC content ");
\& $g\->cmd( "perl", \*(Aqtestit.pl $input $output\*(Aq);
\& 
\& $g\->in;     # \-\-\- inputs   \-\-\- #
\& $g\->param( format=>"fasta", name=>"input", type=>"data", label=>"Source file");
\& 
\& $g\->out;    # \-\-\- outputs  \-\-\- #
\& $g\->data( format=>"tabular", name=>"output" );
\&                           
\& $g\->tests;  # \-\-\-  tests   \-\-\- #
\& $g\->test;
\& $g\->z\->param(name=>"input", value=>"fa_gc_content_input.fa");
\& $g\->output( name=>"out_file1", file=>"fa_gc_content_output.txt");
\&     
\&             # \-\-\-  help    \-\-\- #    
\& $g\->help("This tool computes GC content from a FASTA file.");
\&
\& # print as string  
\& $g\->xml\->sprint
\& 
\& Produces:
\& 
\& <tool hidden="false" id="fa_gc_content_1" name="Compute GC contents" version="0.001">
\&  <description>Compute GC content </description>
\&  <command interpreter="perl">testit.pl $input $output</command>
\&  <inputs>
\&    <param format="fasta" label="Source file" name="input" type="data"/>
\&  </inputs>
\&  <outputs>
\&    <data format="tabular" name="output"/>
\&  </outputs>
\&  <tests>
\&    <test>
\&      <param name="input" value="fa_gc_content_input.fa"/>
\&      <output file="fa_gc_content_output.txt" name="out_file1"/>
\&    </test>
\&  </tests>
\&  <help>This tool computes GC content from a FASTA file.</help>
\&</tool>
.Ve
.PP
.Vb 1
\& Galaxy is an open, web\-based platform for data intensive biomedical research (galaxyproject.org). 
\& 
\& A Galaxy Tool XML file is normally needed to accompany a Galaxy Tool application for specification of a generic galaxy
\& user interface for the tool. This module allows for the specification of Galaxy Tool XML files using Perl.
\& 
\& The module is essentially a wrapper around XML::Twig. Each method adds a twig to an xml tree, and sets the cursor
\& following the examples outlined below. 
\&  
\& The methods follow the tag sets at
\& http://wiki.g2.bx.psu.edu/Admin/Tools/Tool%20Config%20Syntax#A.3Ctool.3E_tag_set
\& 
\& A Tool XML file is normally composed of an encompasing tool tag, and then several top level tags. Commonly used top level 
\& tags in a Galaxy Tool XML file are description: command, input, outputs, tests & help, as below:
\& 
\& <tool ...
\&  <description ...
\&  <command ..
\&  <inputs ..
\&    .... under this tag specification of interface for input data
\&  <outputs ..
\&    ... under this tag specificication of output data
\&  <tests ..  
\&    ... specifies functional tests
\&  <help ..
\& </tool>
\&    
\& Walking through an example segment (see the synopsis):
\& 
\& $g\->tests; # Start Tests top level tag
\& $g\->test;  # test tag (nests automatically in tests)
\& $g\->z;     # indent, so next statement nests in test tag
\& $g\->param( name=>"input", value=>"fa_gc_content_input.fa");       # param must be nested inside test tag
\& $g\->output( name=>"out_file1", file=>"fa_gc_content_output.txt"); # output tag on same hierarchy as param, and follows param.
\& 
\& contributes this to the XML file:
\& ...
\& <tests>
\&    <test>
\&      <param name="input" value="fa_gc_content_input.fa"/>
\&      <output file="fa_gc_content_output.txt" name="out_file1"/>
\&    </test>
\&  </tests>
\& ...
\& 
\& The "tests" method sets a top\-level tag, which can be thought of as a "tests section" of your XML Tool file.
\& The next statement following this top level tag, (that is not another top level tag), will be a child of this tag.
\& In the example above, this is the "test" tag. 
\& 
\& Any further tag statement will be a child of "tests", unless the indent operator z is used to nest in the preceeding tag. 
\& In the example above this is used to nest the param tag. This might also be written:  
\&     
\&     $g\->z\->param( name=>"input", value=>"fa_gc_content_input.fa"); 
\& 
\& The x operator reverses the indentation, i.e. it exits the current node and sets the cursor to the parent tag, and any further tags will be inserted
\& last siblings of this parent tag.
\& 
\& The use of another top level tag starts a new section of the document.
\&    
\& NOTE: There is no verification that the correct options/attributes have been specified in each tag statement, nor whether 
\& the correct tags have been nested within each other. You have to ensure this by following the galaxy tag set specification
\& given above. There plan is to add checking in the future. 
\&
\& Aliases for some of the official tags:
\& command: cmd, inputs: in, outputs: out, description: desc, conditional: cond, options: opts, option: opt
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
NJWalker <njwalker@gmail.com>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This software is copyright (c) 2011 by NJWalker.
.PP
This is free software; you can redistribute it and/or modify it under
the same terms as the Perl 5 programming language system itself.
.SH "POD ERRORS"
.IX Header "POD ERRORS"
Hey! \fBThe above document had some coding errors, which are explained below:\fR
.IP "Around line 369:" 4
.IX Item "Around line 369:"
Unknown directive: =SYNOPSIS
.IP "Around line 412:" 4
.IX Item "Around line 412:"
Unknown directive: =DESCRIPTION
